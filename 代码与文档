## 代码与文档

公司库里面的代码注释应当用Doxgen解释，用Git管理，代码应当基本符合MISRA-2004标准，应当用Lint检查。
在风格方面应当一致，可以用AStyle工具进行自动排版。

个人的代码和注释符合自己的喜好就行。

正式的文档应当应当用TeX语言批处理生成，用UE+MARKDOWN编写，然后自动生成TeX代码，最后生成PDF。

所有的文档应当入库，包括但不仅仅于此：

 开发笔记 => 开发的正式文档 => 用户文档 + 示例说明。
 
文档中一定要包含参考资料，必要的情况下，将参考文档打包一起放进去。

为了编码的整洁性，宏应该越少越好，过多的宏会让代码的解读性变差，文件多没关系。统一性呢？有时候代码里的宏开关是必要的，是的，必须有的才能加进来。

每个头文件要尽量简单，便于重构或提取信息。

代码越简洁，越容易重用和维护。

代码的呵护：没有整理过的代码不是好代码，需要用的代码要时时维护，不然就会不好用了。
代码越规范，其生命周期越长。

每个C文件都应当提供调试方法说明，在服务器端提供良好的接口，最好由宏生成一部分。内置的调试手段应当作为完整的工具使用。
可以提供单独测试的手段或者思路。

## 文档编写

* 用Visio和Inkscape绘制框图和流程图，导出为PDF提供给LaTeX。
* 用R和gnuplot绘制统计性图片，然后直接导出为eps文件。
* 使用自己感觉合适的Markdown语法。
* 发布的信息采用TeX+PDF发布。

## 代码编写

* 插入调试桩，最好能从源码导出调试桩列表
    
  	/*----------------------------------------.
  	 | Here is a debug point for BAT dump 	  |
  	 | - dump_bat()							              |
  	 \----------------------------------------*/
  	 
  	/*----------------------------------------.
  	 | Here is a debug point for BAT dump 	  |
  	 | - dump_bat()							              |
  	 |_______________________________________*/
  	 
  	/*----------------------------------------.
  	 | Jinfeng:                               |
  	 | Here is a debug point for BAT dump 	  |
  	 | - dump_bat()							              |
  	 |_______________________________________*/
  	 
  	/*----------------------------------------.
  	 | Jinfeng:                               |
  	 |                                        |
  	 | Here is a debug point for BAT dump     |
  	 | - dump_bat()                           |
  	 |_______________________________________*/

* 插入需要优化的代码提示

    /* WEAKNESS
     * The code should be re-implemented
     */
    
    BUG         代码存在明显错误
    WEAKNESS    代码可能引发错误
    BADCODE     糟糕的代码
    UNREADBLE   必要的代码，代码很难理解，需要注释
    NOTE        可能不清楚为什么要放这么一段代码
    ATTENTION   必须要注意的信息，否则极有可能造成严重后果
    
* 串口输出要带上前缀，告知开发者是否有错误存在，在哪个函数，哪一行代码。
